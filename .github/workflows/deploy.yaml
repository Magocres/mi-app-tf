name: Deploy Terraform to AWS

on:
  workflow_dispatch:
    inputs:
      resource:
        type: choice
        description: Choose the resource
        options:
          - prod
          - dev
      action:
        type: choice
        description: 'Terraform Action to Perform'
        options:
          - Terraform_apply
          - Terraform_destroy
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Inicializar Terraform
        run: terraform init

      - name: Aplicar Terraform (si se selecciona Terraform_apply)
        if: ${{ github.event.inputs.action == 'Terraform_apply' }}
        run: terraform apply -auto-approve -var-file=variables.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}

      - name: Copiar estado de Terraform desde S3 (si se selecciona Terraform_destroy)
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: aws s3 cp s3://bc-tareadespliegue/mi-app-${{ github.event.inputs.resource }}.tfstate terraform.tfstate
        id: copy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}

      - name: Mostrar plan de destrucción de Terraform (si se selecciona Terraform_destroy)
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: terraform plan -destroy
        continue-on-error: true

      - name: Destruir recursos de Terraform (si se selecciona Terraform_destroy)
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: terraform destroy -auto-approve

      - name: Eliminar archivo de plan de estado (si se selecciona Terraform_destroy)
        if: ${{ github.event.inputs.action == 'Terraform_destroy' && steps.destroy.outcome == 'success' }}
        run: aws s3 rm s3://bc-tareadespliegue/mi-app-${{ github.event.inputs.resource }}.tfstate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}